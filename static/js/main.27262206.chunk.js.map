{"version":3,"sources":["components/icon/Icon.js","components/IconWrapper.js","components/end-game-message/Message.js","components/Nav.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Icon","state","hover","style","margin","cursor","backgroundColor","toggleHover","_callee","regenerator_default","a","wrap","_context","prev","next","_this","setState","stop","setColorOnHover","color","_this2","this","react_default","createElement","Fragment","react_fontawesome_index_es","onClick","props","handleClick","id","Object","objectSpread","icon","onMouseEnter","onMouseLeave","spin","size","border","fixedWidth","React","Component","IconWrapper","Container_default","overflow","Jumbotron_default","renderIconCards","Message","Alert_default","textAlign","variant","show","message","styles","Nav","fluid","score","topScore","Button_default","handleResetGame","preProcessIconJSON","icons","map","clicked","Game","gameOver","gameWon","foundIndex","abrupt","findIndex","item","updateGameState","updateClicked","incrementScore","shuffleIcons","length","updateGameWon","uncheckAllIcons","uncheckedIcons","index","IconArray","_callee2","array","arrayLength","i","randomIndex","temp","_context2","Math","floor","random","_callee3","_context3","setTopScore","resetScore","_callee4","_context4","_callee5","_context5","won","isGameWon","determineVariant","determineMessage","icon_Icon","key","faviconName","className","components_Nav","end_game_message_Message","components_IconWrapper","library","add","faUser","faCheckSquare","faCoffee","faRocket","faFan","faTachometerAlt","faAdjust","faSkiing","faHamburger","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27262206.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nclass Icon extends React.Component {\n\n  state = {\n    hover: false,\n    style: {\n      margin: '20px',\n      cursor: 'pointer',\n      backgroundColor: 'rgb(96, 125, 139)'\n    }\n  }\n\n  toggleHover = async () => {\n    await this.setState({ hover: !this.state.hover })\n  }\n\n  setColorOnHover = () => {\n    let color;\n    if (this.state.hover) {\n      color = { color: '#ed1212' }\n    } else {\n      color = { color: '#000' }\n    }\n    return color\n  }\n\n  render() {\n\n    return (\n      <React.Fragment>\n        <FontAwesomeIcon\n          onClick={() => this.props.handleClick(this.props.id)}\n          style={{ ...this.state.style, ...this.setColorOnHover() }}\n          icon={this.props.icon}\n          onMouseEnter={this.toggleHover} \n          onMouseLeave={this.toggleHover}\n          spin={this.state.hover}\n          size=\"10x\" \n          border \n          fixedWidth \n        />\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default Icon;","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nconst IconWrapper = (props) => (\n    <Container style={{ 'overflow': true }}>\n      <Jumbotron >\n        {/* Icons */}\n        {props.renderIconCards()}\n      </Jumbotron>\n    </Container>\n  );\n\nexport default IconWrapper;\n","import React from 'react';\n\nimport Alert from 'react-bootstrap/Alert';\n\n\nconst Message = (props) => {\n  return (\n    <div>\n      <Alert\n        style={{ textAlign: 'center' }}\n        variant={props.variant}\n        show={props.show}>\n        {props.message}\n      </Alert>\n    </div>\n  );\n}\n\nexport default Message;","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\n\nconst styles = {\n  'textAlign': 'center',\n  'backgroundColor': 'rgb(48, 99, 127)',\n  color: 'white'\n};\n\nconst Nav = (props) => {\n\n  return (\n    <Container\n      fluid=\"true\"\n      style={styles}\n    >\n      <h1 >\n        Clicky Game\n        </h1>\n      <div id=\"score\">\n        Score:\n        {' '}\n        {props.score}\n        {' '}\n        | Top Score:\n        {' '}\n        {props.topScore}\n      </div>\n      <Button\n        variant=\"success\"\n        onClick={() => props.handleResetGame()}\n      >\n        Reset Game\n        </Button>\n    </Container>\n  );\n\n}\n\nexport default Nav;\n","import React from 'react';\r\n\r\nimport icons from './icon/icons.json';\r\nimport Icon from './icon/Icon';\r\nimport IconWrapper from './IconWrapper'\r\nimport Message from './end-game-message/Message';\r\nimport Nav from './Nav'\r\n\r\n\r\n// Add clicked property to each icon\r\nconst preProcessIconJSON = () => {\r\n  return icons.map(icon => {\r\n    icon.clicked = false;\r\n    return icon;\r\n  });\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  state = {\r\n    score: 0,\r\n    topScore: 0,\r\n    icons: preProcessIconJSON(),\r\n    gameOver: false,\r\n    gameWon: false,\r\n  }\r\n\r\n  // Shuffle icons on page load\r\n  // componentWillMount() {\r\n  //   this.shuffleIcons()\r\n  // }\r\n\r\n  // Main event handler on icon click\r\n  handleClick = async (id) => {\r\n    // Check if game over. Prevent icon click if true\r\n    if (this.state.gameOver) {\r\n      return\r\n    }\r\n    // Linear seach to find clicked item\r\n    const foundIndex = this.state.icons.findIndex(item => {\r\n      return item.id === id;\r\n    });\r\n    const foundItem = this.state.icons[foundIndex];\r\n\r\n    if (foundItem.clicked) { // Icon has already been clicked. Game over -> Loss\r\n      await this.updateGameState(true);\r\n    } else {\r\n      await this.updateClicked(true, foundIndex);\r\n      await this.incrementScore();\r\n      await this.shuffleIcons();\r\n      if (this.state.score === this.state.icons.length) { // All icons have been clicked only once. Game over -> Win\r\n        await this.updateGameState(true);\r\n        await this.updateGameWon(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Set clicked property to false for all icons\r\n  uncheckAllIcons = () => {\r\n    const uncheckedIcons = this.state.icons.map(icon => {\r\n      icon.clicked = false;\r\n      return icon;\r\n    });\r\n    this.setState({ icons: uncheckedIcons })\r\n  }\r\n\r\n  // Update clicked property for icon\r\n  updateClicked = (clicked, index) => {\r\n    const IconArray = this.state.icons;\r\n    IconArray[index].clicked = clicked;\r\n    this.setState({ icons: IconArray })\r\n  }\r\n\r\n  shuffleIcons = async () => {\r\n    const array = this.state.icons;\r\n    const arrayLength = array.length;\r\n\r\n    for (let i = arrayLength - 1; i > 0; i--) {\r\n      const randomIndex = Math.floor(Math.random() * (i + 1));\r\n      const temp = array[randomIndex];\r\n      array[randomIndex] = array[i];\r\n      array[i] = temp;\r\n    }\r\n    await this.setState({ icons: array })\r\n  };\r\n\r\n  incrementScore = async () => {\r\n    await this.setState({ score: this.state.score + 1 })\r\n    await this.setTopScore();\r\n  }\r\n\r\n  resetScore = () => {\r\n    this.setState({ score: 0 })\r\n  }\r\n\r\n  setTopScore = async () => {\r\n    if (this.state.score > this.state.topScore) {\r\n      await this.setState({ topScore: this.state.score });\r\n    }\r\n  }\r\n\r\n  handleResetGame = async () => {\r\n    await this.updateGameState(false);\r\n    await this.updateGameWon(false);\r\n    await this.resetScore();\r\n    await this.shuffleIcons();\r\n    await this.uncheckAllIcons()\r\n  }\r\n\r\n  updateGameState = (state) => {\r\n    this.setState({ gameOver: state })\r\n  }\r\n\r\n  updateGameWon = (won) => {\r\n    this.setState({ gameWon: won })\r\n  }\r\n\r\n  isGameWon = () => {\r\n    return this.state.gameOver && this.state.gameWon;\r\n  }\r\n\r\n  determineVariant = () => {\r\n    if (this.isGameWon()) {\r\n      return 'success';\r\n    }\r\n    return 'danger';\r\n  }\r\n\r\n  determineMessage = () => {\r\n    if (this.isGameWon()) {\r\n      return 'You Win!';\r\n    }\r\n    return 'You Lose!';\r\n  }\r\n\r\n  renderIconCards = () => {\r\n    return this.state.icons.map(icon =>  (\r\n        <Icon\r\n          key={icon.id}\r\n          id={icon.id}\r\n          icon={icon.faviconName}\r\n          handleClick={this.handleClick}\r\n          clicked={icon.clicked}>\r\n        </Icon>\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" style={{ overflow: true }}>\r\n        <Nav\r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n          handleResetGame={this.handleResetGame}\r\n        />\r\n\r\n        {/* Game over message */}\r\n        <Message\r\n          show={this.state.gameOver}\r\n          variant={this.determineVariant()}\r\n          message={this.determineMessage()}>\r\n        </Message>\r\n\r\n        {/* Icons */}\r\n        <IconWrapper renderIconCards={this.renderIconCards} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\n\n// Fontawesome imports\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faUser, faRocket, faFan, faTachometerAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCheckSquare, faCoffee, faAdjust, faSkiing, faHamburger } from '@fortawesome/free-solid-svg-icons'\n\n// Bootstrap imports\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Game from './components/Game';\n\n// Add Fontawesome icons to library\nlibrary.add(faUser, faCheckSquare, faCoffee, faRocket, faFan, faTachometerAlt, faAdjust, faSkiing, faHamburger);\n\nconst App = () => (\n  <Game />\n);\n\n\nexport default App;\n","/*\n * This optional code is used to register a service worker.\n * register() is not called by default.\n */\n\n/*\n * This lets the app load faster on subsequent visits in production, and gives\n * it offline capabilities. However, it also means that developers (and users)\n * will only see deployed updates on subsequent visits to a page, after all the\n * existing tabs open on the page have been closed, since previously cached\n * resources are updated in the background.\n */\n\n/*\n * To learn more about the benefits of this model and instructions on how to\n * opt-in, read https://bit.ly/CRA-PWA\n */\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport function register (config) {\n\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n\n      /*\n       * Our service worker won't work if PUBLIC_URL is on a different origin\n       * from what our page is served on. This might happen if a CDN is used to\n       * serve assets; see https://github.com/facebook/create-react-app/issues/2374\n       */\n      return;\n\n    }\n\n    window.addEventListener('load', () => {\n\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        /*\n         * Add some additional logging to localhost, pointing developers to the\n         * service worker/PWA documentation.\n         */\n        navigator.serviceWorker.ready.then(() => {\n\n          console.log('This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA');\n\n        });\n\n      } else {\n\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n\n      }\n\n    });\n\n  }\n\n}\n\nfunction registerValidSW (swUrl, config) {\n\n  navigator.serviceWorker.\n    register(swUrl).\n    then((registration) => {\n\n      registration.onupdatefound = () => {\n\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n\n          return;\n\n        }\n        installingWorker.onstatechange = () => {\n\n          if (installingWorker.state === 'installed') {\n\n            if (navigator.serviceWorker.controller) {\n\n              /*\n               * At this point, the updated precached content has been fetched,\n               * but the previous service worker will still serve the older\n               * content until all client tabs are closed.\n               */\n              console.log('New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n\n                config.onUpdate(registration);\n\n              }\n\n            } else {\n\n              /*\n               * At this point, everything has been precached.\n               * It's the perfect time to display a\n               * \"Content is cached for offline use.\" message.\n               */\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n\n                config.onSuccess(registration);\n\n              }\n\n            }\n\n          }\n\n        };\n\n      };\n\n    }).\n    catch((error) => {\n\n      console.error('Error during service worker registration:', error);\n\n    });\n\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).\n    then((response) => {\n\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        contentType != null && contentType.indexOf('javascript') === -1\n      ) {\n\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n\n          registration.unregister().then(() => {\n\n            window.location.reload();\n\n          });\n\n        });\n\n      } else {\n\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n\n      }\n\n    }).\n    catch(() => {\n\n      console.log('No internet connection found. App is running in offline mode.');\n\n    });\n\n}\n\nexport function unregister () {\n\n  if ('serviceWorker' in navigator) {\n\n    navigator.serviceWorker.ready.then((registration) => {\n\n      registration.unregister();\n\n    });\n\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}