{"version":3,"sources":["components/icon/Icon.js","components/IconWrapper.js","components/end-game-message/Message.js","components/Nav.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Icon","state","hover","style","margin","cursor","backgroundColor","toggleHover","_callee","regenerator_default","a","wrap","_context","prev","next","_this","setState","stop","setColorOnHover","color","_this2","this","react_default","createElement","Fragment","react_fontawesome_index_es","onClick","props","handleClick","id","Object","objectSpread","icon","onMouseEnter","onMouseLeave","spin","size","border","fixedWidth","React","Component","IconWrapper","Container_default","overflow","Jumbotron_default","renderIconCards","Message","Alert_default","textAlign","variant","show","message","styles","Nav","fluid","score","topScore","Button_default","handleResetGame","library","add","faUser","faCheckSquare","faCoffee","faRocket","faFan","faTachometerAlt","preProcessIconJSON","icons","map","clicked","Game","gameOver","gameWon","foundIndex","abrupt","findIndex","item","updateGameState","updateClicked","incrementScore","shuffleIcons","length","updateGameWon","_callee2","array","arrayLength","i","randomIndex","temp","_context2","Math","floor","random","resetScore","setTopScore","_callee3","_context3","uncheckAllIcons","won","isGameWon","determineVariant","determineMessage","icon_Icon","key","faviconName","uncheckedIcons","index","IconArray","className","components_Nav","end_game_message_Message","components_IconWrapper","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e0c7a82.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nclass Icon extends React.Component {\n\n  state = {\n    hover: false,\n    style: {\n      margin: '20px',\n      cursor: 'pointer',\n      backgroundColor: 'rgb(96, 125, 139)'\n    }\n  }\n\n  toggleHover = async () => {\n    await this.setState({ hover: !this.state.hover })\n  }\n\n  setColorOnHover = () => {\n    let color;\n    if (this.state.hover) {\n      color = { color: '#ed1212' }\n    } else {\n      color = { color: '#000' }\n    }\n    return color\n  }\n\n  render() {\n\n    return (\n      <React.Fragment>\n        <FontAwesomeIcon\n          onClick={() => this.props.handleClick(this.props.id)}\n          style={{ ...this.state.style, ...this.setColorOnHover() }}\n          icon={this.props.icon}\n          onMouseEnter={this.toggleHover} \n          onMouseLeave={this.toggleHover}\n          spin={this.state.hover}\n          size=\"10x\" \n          border \n          fixedWidth \n        />\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default Icon;","import React from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\n\r\nfunction IconWrapper(props) {\r\n  return (\r\n    <Container style={{ overflow: true }}>\r\n      <Jumbotron >\r\n        {/* Icons */}\r\n        {props.renderIconCards()}\r\n      </Jumbotron>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default IconWrapper;\r\n","import React from 'react';\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\n\r\nfunction Message(props) {\r\n  return (\r\n    <div>\r\n      <Alert\r\n        style={{ textAlign: 'center' }}\r\n        variant={props.variant}\r\n        show={props.show}>\r\n        {props.message}\r\n      </Alert>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst styles = {\r\n  textAlign: 'center',\r\n  backgroundColor: '#e9ecef'\r\n}\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <Container fluid='true' style={styles}>\r\n      <h1 >Clicky Game</h1>\r\n      <div id='score'>Score: {props.score} | Top Score: {props.topScore}</div>\r\n      <Button\r\n        variant=\"success\"\r\n        onClick={() => props.handleResetGame()}>\r\n        Reset Game\r\n      </Button>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Nav","import React from 'react';\r\n\r\n// Fontawesome imports\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faUser, faRocket, faFan, faTachometerAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCheckSquare, faCoffee } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// Bootstrap imports\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport icons from './icon/icons.json';\r\nimport Icon from './icon/Icon';\r\nimport IconWrapper from './IconWrapper'\r\nimport Message from './end-game-message/Message';\r\nimport Nav from './Nav'\r\n\r\nlibrary.add(faUser, faCheckSquare, faCoffee, faRocket, faFan, faTachometerAlt);\r\n\r\n// Add clicked property to each icon\r\nconst preProcessIconJSON = () => {\r\n  return icons.map(icon => {\r\n    icon.clicked = false;\r\n    return icon;\r\n  });\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  state = {\r\n    score: 0,\r\n    topScore: 0,\r\n    icons: preProcessIconJSON(),\r\n    gameOver: false,\r\n    gameWon: false,\r\n  }\r\n\r\n  // Main event handler on icon click\r\n  handleClick = async (id) => {\r\n    // Check if game over. Prevent icon click if true\r\n    if (this.state.gameOver) {\r\n      return\r\n    }\r\n    // Linear seach to find clicked item\r\n    const foundIndex = this.state.icons.findIndex((item) => {\r\n      return item.id === id;\r\n    });\r\n    const foundItem = this.state.icons[foundIndex];\r\n\r\n    if (foundItem.clicked) { // Icon has already been clicked. Game over -> Loss\r\n      await this.updateGameState(true);\r\n    } else {\r\n      await this.updateClicked(true, foundIndex);\r\n      await this.incrementScore();\r\n      await this.shuffleIcons();\r\n      if (this.state.score === this.state.icons.length) { // All icons have been clicked only once. Game over -> Win\r\n        await this.updateGameState(true);\r\n        await this.updateGameWon(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Set clicked property to false for all icons\r\n  uncheckAllIcons() {\r\n    const uncheckedIcons = this.state.icons.map(icon => {\r\n      icon.clicked = false;\r\n      return icon;\r\n    });\r\n    this.setState({ icons: uncheckedIcons })\r\n  }\r\n\r\n  // Update clicked property for icon\r\n  updateClicked(clicked, index) {\r\n    const IconArray = this.state.icons;\r\n    IconArray[index].clicked = clicked;\r\n    this.setState({ icons: IconArray })\r\n  }\r\n\r\n  shuffleIcons = async () => {\r\n    const array = this.state.icons;\r\n    const arrayLength = array.length;\r\n\r\n    for (let i = arrayLength - 1; i > 0; i--) {\r\n      const randomIndex = Math.floor(Math.random() * (i + 1));\r\n      const temp = array[randomIndex];\r\n      array[randomIndex] = array[i];\r\n      array[i] = temp;\r\n    }\r\n    await this.setState({ icons: array })\r\n  };\r\n\r\n  incrementScore = () => {\r\n    this.setState({ score: this.state.score + 1 })\r\n  }\r\n\r\n  resetScore = () => {\r\n    this.setState({ score: 0 })\r\n  }\r\n\r\n  setTopScore = () => {\r\n    if (this.state.score > this.state.topScore) {\r\n      this.setState({ topScore: this.state.score });\r\n    }\r\n    this.resetScore();\r\n  }\r\n\r\n  handleResetGame = async () => {\r\n    await this.updateGameState(false);\r\n    await this.updateGameWon(false)\r\n    await this.shuffleIcons();\r\n    await this.uncheckAllIcons()\r\n    await this.setTopScore();\r\n  }\r\n\r\n  updateGameState(state) {\r\n    this.setState({ gameOver: state })\r\n  }\r\n\r\n  updateGameWon = (won) => {\r\n    this.setState({ gameWon: won })\r\n  }\r\n\r\n  isGameWon = () => {\r\n    return this.state.gameOver && this.state.gameWon;\r\n  }\r\n\r\n  determineVariant = () => {\r\n    if (this.isGameWon()) {\r\n      return 'success';\r\n    }\r\n    return 'danger';\r\n  }\r\n\r\n  determineMessage = () => {\r\n    if (this.isGameWon()) {\r\n      return 'You Win!';\r\n    }\r\n    return 'You Lose!';\r\n  }\r\n\r\n  renderIconCards = () => {\r\n    return this.state.icons.map(icon => {\r\n      return (\r\n        <Icon\r\n          key={icon.id}\r\n          id={icon.id}\r\n          icon={icon.faviconName}\r\n          handleClick={this.handleClick}\r\n          clicked={icon.clicked}>\r\n        </Icon>\r\n      );\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" style={{ overflow: true }}>\r\n        <Nav\r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n          handleResetGame={this.handleResetGame}\r\n        />\r\n\r\n        {/* Game over message */}\r\n        <Message show={this.state.gameOver} variant={this.determineVariant()} message={this.determineMessage()}></Message>\r\n\r\n        <IconWrapper renderIconCards={this.renderIconCards} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\n\nimport Game from './components/Game';\n\n\nfunction App() {\n  return <Game />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}