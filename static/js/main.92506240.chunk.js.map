{"version":3,"sources":["components/icon/icon.js","App.js","serviceWorker.js","index.js"],"names":["styles","icon","marginTop","Icon","_this","this","react_default","a","createElement","react_fontawesome_index_es","onClick","props","handleClick","id","style","size","border","fixedWidth","pull","React","Component","library","add","faUser","faCheckSquare","faCoffee","faRocket","faFan","faTachometerAlt","preProcessImages","images","map","image","clicked","App","state","score","topScore","gameOver","_callee","foundIndex","regenerator_default","wrap","_context","prev","next","console","log","abrupt","findIndex","item","updateGameState","updateClicked","incrementScore","shuffleImages","length","stop","_callee2","array","imageLength","i","randomIndex","temp","_context2","Math","floor","random","setState","resetScore","setTopScore","handleResetGame","_callee3","_context3","uncheckAllImages","renderImageCards","key","imageUrl","uncheckedImages","index","imageArray","className","Button_default","variant","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ilBAGMA,EAAS,CACbC,KAAM,CACJC,UAAa,SAkCFC,mLAdJ,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,QAAS,kBAAMN,EAAKO,MAAMC,YAAYR,EAAKO,MAAME,KACjDC,MAAOd,EAAOC,KAAMA,KAAMI,KAAKM,MAAMV,KACrCc,KAAK,KAAKC,QAAM,EAACC,YAAU,EAACC,KAAK,iBAtBxBC,IAAMC,WCMzBC,IAAQC,IAAIC,IAAQC,IAAeC,IAAUC,IAAUC,IAAOC,KAG9D,IAAMC,EAAmB,WACvB,OAAOC,EAAOC,IAAI,SAAAC,GAEhB,OADAA,EAAMC,SAAU,EACTD,KA2HIE,6MArHbC,MAAQ,CACNC,MAAO,EACPC,SAAU,EACVP,OAAQD,IACRS,UAAU,KAOZ1B,kDAAc,SAAA2B,EAAO1B,GAAP,IAAA2B,EAAA,OAAAC,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACRzC,EAAK+B,MAAMG,SADH,CAAAK,EAAAE,KAAA,eAEVC,QAAQC,IAAI,aAFFJ,EAAAK,OAAA,oBAKNR,EAAapC,EAAK+B,MAAML,OAAOmB,UAAU,SAACC,GAC9C,OAAOA,EAAKrC,KAAOA,KAEHT,EAAK+B,MAAML,OAAOU,GAEtBP,QAVF,CAAAU,EAAAE,KAAA,SAWVzC,EAAK+C,iBAAgB,GACrBL,QAAQC,IAAI,aAZFJ,EAAAE,KAAA,wBAAAF,EAAAE,KAAA,GAeJzC,EAAKgD,eAAc,EAAMZ,GAfrB,eAAAG,EAAAE,KAAA,GAgBJzC,EAAKiD,iBAhBD,eAAAV,EAAAE,KAAA,GAiBJzC,EAAKkD,gBAjBD,QAkBNlD,EAAK+B,MAAMC,QAAUhC,EAAK+B,MAAML,OAAOyB,SACzCnD,EAAK+C,iBAAgB,GACrBL,QAAQC,IAAI,aApBJ,QAuBZD,QAAQC,IAAI3C,EAAK+B,MAAML,QAvBX,yBAAAa,EAAAa,SAAAjB,8DAwCde,mCAAgB,SAAAG,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAArB,EAAAlC,EAAAmC,KAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,OAId,IAHMa,EAAQtD,EAAK+B,MAAML,OACnB6B,EAAcD,EAAMH,OAEjBK,EAAID,EAAc,EAAGC,EAAI,EAAGA,IAC7BC,EAAcG,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IAC9CE,EAAOJ,EAAMG,GACnBH,EAAMG,GAAeH,EAAME,GAC3BF,EAAME,GAAKE,EARC,OAAAC,EAAAlB,KAAA,EAURzC,EAAK+D,SAAS,CAAErC,OAAQ4B,IAVhB,wBAAAK,EAAAP,SAAAC,QAchBJ,eAAiB,WACfjD,EAAK+D,SAAS,CAAE/B,MAAOhC,EAAK+B,MAAMC,MAAQ,OAG5CgC,WAAa,WACXhE,EAAK+D,SAAS,CAAE/B,MAAO,OAGzBiC,YAAc,WACRjE,EAAK+B,MAAMC,MAAQhC,EAAK+B,MAAME,UAChCjC,EAAK+D,SAAS,CAAE9B,SAAUjC,EAAK+B,MAAMC,QAEvChC,EAAKgE,gBAGPE,qCAAkB,SAAAC,IAAA,OAAA9B,EAAAlC,EAAAmC,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAChBC,QAAQC,IAAI,SADIyB,EAAA3B,KAAA,EAEVzC,EAAK+C,iBAAgB,GAFX,cAAAqB,EAAA3B,KAAA,EAGVzC,EAAKkD,gBAHK,cAAAkB,EAAA3B,KAAA,EAIVzC,EAAKqE,mBAJK,cAAAD,EAAA3B,KAAA,EAKVzC,EAAKiE,cALK,wBAAAG,EAAAhB,SAAAe,QAQlBG,iBAAmB,WACjB,OAAOtE,EAAK+B,MAAML,OAAOC,IAAI,SAAAC,GAC3B,OACE1B,EAAAC,EAAAC,cAACP,EAAD,CACE0E,IAAK3C,EAAMnB,GACXA,GAAImB,EAAMnB,GACVZ,KAAM+B,EAAM4C,SACZhE,YAAaR,EAAKQ,YAClBqB,QAASD,EAAMC,4FAzFPE,GACd9B,KAAK8D,SAAS,CAAE7B,SAAUH,+CA8B1B,IAAM0C,EAAkBxE,KAAK8B,MAAML,OAAOC,IAAI,SAAAC,GAE5C,OADAA,EAAMC,SAAU,EACTD,IAET3B,KAAK8D,SAAS,CAAErC,OAAQ+C,0CAGZ5C,EAAS6C,GACrB,IAAMC,EAAa1E,KAAK8B,MAAML,OAC9BiD,EAAWD,GAAO7C,QAAUA,EAC5B5B,KAAK8D,SAAS,CAAErC,OAAQiD,qCAsDxB,OACEzE,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,OAEb1E,EAAAC,EAAAC,cAAA,UAAQwE,UAAU,cAClB1E,EAAAC,EAAAC,cAAA,yBACEF,EAAAC,EAAAC,cAAA,OAAKK,GAAG,SAAR,UAAwBR,KAAK8B,MAAMC,MAAnC,iBAAwD/B,KAAK8B,MAAME,UACnE/B,EAAAC,EAAAC,cAACyE,EAAA1E,EAAD,CAAQ2E,QAAQ,UAAUxE,QAASL,KAAKiE,iBAAxC,eAGDjE,KAAKqE,2BAjHIvD,IAAMC,WCbJ+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnF,EAAAC,EAAAC,cAACkF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92506240.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst styles = {\n  icon: {\n    'marginTop': '50px',\n  }\n}\n\nclass Icon extends React.Component {\n  // state = {\n  //   clicked: this.props.clicked,\n  // }\n\n  // handleClick = async () => {\n  //   // console.log(this.state.clicked)\n  //   if (this.state.clicked) {\n  //     return this.props.handleClick(true)\n  //   }\n  //   // console.log('set to true')\n  //   await this.setState({ clicked: true });\n  //   // console.log(this.state.clicked)\n  //   return this.props.handleClick(false)\n  // }\n\n  render() {\n    return (\n      <div>\n        <FontAwesomeIcon\n          onClick={() => this.props.handleClick(this.props.id)}\n          style={styles.icon} icon={this.props.icon}\n          size=\"8x\" border fixedWidth pull=\"left\"\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default Icon;","import React from 'react';\n\n// Fontawesome imports\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faUser, faRocket, faFan, faTachometerAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCheckSquare, faCoffee } from '@fortawesome/free-solid-svg-icons'\n\n// Bootstrap imports\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Button from 'react-bootstrap/Button';\n\nimport images from './images.json';\nimport Icon from './components/icon/icon';\n\n\nlibrary.add(faUser, faCheckSquare, faCoffee, faRocket, faFan, faTachometerAlt);\n\n// Add clicked property to each image\nconst preProcessImages = () => {\n  return images.map(image => {\n    image.clicked = false;\n    return image;\n  });\n}\n\nclass App extends React.Component {\n\n  state = {\n    score: 0,\n    topScore: 0,\n    images: preProcessImages(),\n    gameOver: false,\n  }\n\n  updateGameState(state) {\n    this.setState({ gameOver: state })\n  }\n\n  handleClick = async (id) => {\n    if (this.state.gameOver) {\n      console.log('game over')\n      return\n    }\n    const foundIndex = this.state.images.findIndex((item) => {\n      return item.id === id;\n    });\n    const foundItem = this.state.images[foundIndex];\n\n    if (foundItem.clicked) {\n      this.updateGameState(true);\n      console.log('You lose!')\n\n    } else {\n      await this.updateClicked(true, foundIndex);\n      await this.incrementScore();\n      await this.shuffleImages();\n      if (this.state.score === this.state.images.length) {\n        this.updateGameState(true);\n        console.log('You win!')\n      }\n    }\n    console.log(this.state.images)\n  }\n\n  uncheckAllImages() {\n    const uncheckedImages = this.state.images.map(image => {\n      image.clicked = false;\n      return image;\n    });\n    this.setState({ images: uncheckedImages })\n  }\n\n  updateClicked(clicked, index) {\n    const imageArray = this.state.images;\n    imageArray[index].clicked = clicked;\n    this.setState({ images: imageArray })\n  }\n\n  shuffleImages = async () => {\n    const array = this.state.images;\n    const imageLength = array.length;\n\n    for (let i = imageLength - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      const temp = array[randomIndex];\n      array[randomIndex] = array[i];\n      array[i] = temp;\n    }\n    await this.setState({ images: array })\n  };\n\n\n  incrementScore = () => {\n    this.setState({ score: this.state.score + 1 })\n  }\n\n  resetScore = () => {\n    this.setState({ score: 0 })\n  }\n\n  setTopScore = () => {\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n    this.resetScore();\n  }\n\n  handleResetGame = async () => {\n    console.log('reset')\n    await this.updateGameState(false);\n    await this.shuffleImages();\n    await this.uncheckAllImages()\n    await this.setTopScore();\n  }\n\n  renderImageCards = () => {\n    return this.state.images.map(image => {\n      return (\n        <Icon\n          key={image.id}\n          id={image.id}\n          icon={image.imageUrl}\n          handleClick={this.handleClick}\n          clicked={image.clicked}></Icon>\n      );\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <header className=\"App-header\">\n        <h1>Clicky Game</h1>\n          <div id='score'>Score: {this.state.score} | Top Score: {this.state.topScore}</div>\n          <Button variant=\"success\" onClick={this.handleResetGame}>Reset Game</Button>\n        </header>\n\n        {this.renderImageCards()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}